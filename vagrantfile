# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "debian/bookworm64"
  config.vm.box_version = ">= 12.0.0"

  config.vm.hostname = "piscine-ds"
  
  config.vm.network "private_network", ip: "192.168.56.10"  
  
  config.vm.network "forwarded_port", guest: 5432, host: 5432    # PostgreSQL
  config.vm.network "forwarded_port", guest: 3000, host: 3000    # Grafana
  config.vm.network "forwarded_port", guest: 8080, host: 8080    # Web services

  config.vm.provider "virtualbox" do |vb|
    vb.name = "piscine-ds-vm"
    vb.memory = "4096"  # 4GB RAM - sufficient for Docker
    vb.cpus = 4         # 4 CPU cores

    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end

  config.vm.synced_folder ".", "/home/vagrant/piscine-datascience", 
    owner: "vagrant", group: "vagrant"

  config.vm.provision "shell", inline: <<-SHELL
    echo "=========================================="
    echo "Upgrading packages in existing VM"
    echo "=========================================="
    apt-get update
    apt-get upgrade -y
    SHELL

  config.vm.provision "shell", inline: <<-SHELL
    echo "=========================================="
    echo "Step 2: Installing Docker and Docker Compose"
    echo "=========================================="
    
    # Install required packages
    apt-get install -y \
      ca-certificates \
      curl \
      gnupg \
      lsb-release

    # Add Docker's official GPG key
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

    # Set up the repository
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    # Update package index
    apt-get update

    # Install Docker Engine
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    # Add vagrant user to docker group
    usermod -aG docker vagrant

    # Enable and start Docker service
    systemctl enable docker
    systemctl start docker

    echo "Docker installation completed!"
    echo "Docker version: $(docker --version)"
    echo "Docker Compose version: $(docker compose version)"
    SHELL

  # Piscine Data Science Tools
  config.vm.provision "shell", inline: <<-SHELL
    echo "=========================================="
    echo "Step 3: Installing Piscine Data Science Tools"
    echo "=========================================="
    
    # Install PostgreSQL client (for connecting to containers)
    apt-get install -y postgresql-client

    # Install essential development tools
    apt-get install -y \
      git \
      vim \
      nano \
      htop \
      tree \
      wget \
      unzip \
      jq \
      zstd

    # Create useful aliases for vagrant user
    cat >> /home/vagrant/.bashrc << 'EOF'

# Piscine Data Science Aliases
alias cdp='cd /home/vagrant/piscine-datascience'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias dps='docker ps'
alias dcu='docker compose up'
alias dcd='docker compose down'
alias dcb='docker compose build'
alias dcl='docker compose logs'
alias psql-local='psql -h localhost -p 5432 -U postgres'

# Navigate to project on login
cd /home/vagrant/piscine-datascience
EOF

    echo "=========================================="
    echo "Piscine Data Science VM Setup Complete!"
    echo "=========================================="
    echo "Available tools:"
    echo "- Docker & Docker Compose"
    echo "- PostgreSQL client"
    echo "- Git, vim, nano, htop, tree"
    echo "- Python 3 with pip"
    echo ""
    echo "Useful aliases:"
    echo "- cdp: Navigate to project directory"
    echo "- dcu/dcd: Docker compose up/down"
    echo "- psql-local: Connect to local PostgreSQL"
    echo ""
    echo "VM IP: 192.168.56.10"
    echo "Ready for Piscine Data Science exercises!"
  SHELL
end
